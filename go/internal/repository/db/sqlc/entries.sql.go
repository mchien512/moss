// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: entries.sql

package db

import (
	"context"
	"time"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (id,
                     user_id,
                     title,
                     content,
                     growth_stage,
                     created_at,
                     updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, title, content, growth_stage, created_at, updated_at
`

type CreateEntryParams struct {
	ID          string    `json:"id"`
	UserID      string    `json:"user_id"`
	Title       string    `json:"title"`
	Content     string    `json:"content"`
	GrowthStage string    `json:"growth_stage"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.GrowthStage,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.GrowthStage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE
FROM entries
WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getEntryByID = `-- name: GetEntryByID :one
SELECT id, user_id, title, content, growth_stage, created_at, updated_at
FROM entries
WHERE id = $1
`

func (q *Queries) GetEntryByID(ctx context.Context, id string) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryByID, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.GrowthStage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEntriesByUser = `-- name: ListEntriesByUser :many
SELECT id, user_id, title, content, growth_stage, created_at, updated_at
FROM entries
WHERE user_id = $1
ORDER BY created_at
`

func (q *Queries) ListEntriesByUser(ctx context.Context, userID string) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.GrowthStage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntriesByUserSince = `-- name: ListEntriesByUserSince :many
SELECT id, user_id, title, content, growth_stage, created_at, updated_at
FROM entries
WHERE user_id = $1
  AND updated_at > $2
ORDER BY updated_at
`

type ListEntriesByUserSinceParams struct {
	UserID    string    `json:"user_id"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) ListEntriesByUserSince(ctx context.Context, arg ListEntriesByUserSinceParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByUserSince, arg.UserID, arg.UpdatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.GrowthStage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE entries
SET title        = $2,
    content      = $3,
    growth_stage = $4,
    updated_at   = $5
WHERE id = $1
RETURNING id, user_id, title, content, growth_stage, created_at, updated_at
`

type UpdateEntryParams struct {
	ID          string    `json:"id"`
	Title       string    `json:"title"`
	Content     string    `json:"content"`
	GrowthStage string    `json:"growth_stage"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntry,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.GrowthStage,
		arg.UpdatedAt,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.GrowthStage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
